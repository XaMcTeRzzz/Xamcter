/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Telegram API
 */

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Telegram
export interface TelegramSettings {
  botToken: string;
  chatId: string;
  enabled: boolean;
  reportSchedule: {
    daily: boolean;
    weekly: boolean;
    dailyTime: string; // —Ñ–æ—Ä–º–∞—Ç "HH:MM"
    weeklyDay: number; // 0-6 (–Ω–µ–¥—ñ–ª—è-—Å—É–±–æ—Ç–∞)
    weeklyTime: string; // —Ñ–æ—Ä–º–∞—Ç "HH:MM"
  };
}

// –ö–ª—é—á –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤ localStorage
export const TELEGRAM_SETTINGS_KEY = "telegram_settings";

// –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
export const DEFAULT_TELEGRAM_SETTINGS: TelegramSettings = {
  botToken: "",
  chatId: "",
  enabled: false,
  reportSchedule: {
    daily: false,
    weekly: false,
    dailyTime: "20:00",
    weeklyDay: 5, // –ü'—è—Ç–Ω–∏—Ü—è
    weeklyTime: "18:00",
  },
};

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –∑ localStorage
 */
export const loadTelegramSettings = (): TelegramSettings => {
  try {
    const savedSettings = localStorage.getItem(TELEGRAM_SETTINGS_KEY);
    if (savedSettings) {
      return JSON.parse(savedSettings);
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Telegram:", error);
  }
  return DEFAULT_TELEGRAM_SETTINGS;
};

/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –≤ localStorage
 */
export const saveTelegramSettings = (settings: TelegramSettings): void => {
  try {
    localStorage.setItem(TELEGRAM_SETTINGS_KEY, JSON.stringify(settings));
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Telegram:", error);
  }
};

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç
 */
export const sendTelegramMessage = async (
  botToken: string,
  chatId: string,
  message: string
): Promise<boolean> => {
  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: "HTML",
        }),
      }
    );

    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram:", error);
    return false;
  }
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
 */
export const validateBotToken = async (botToken: string): Promise<boolean> => {
  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/getMe`
    );
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞:", error);
    return false;
  }
};

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥–º—ñ–Ω–æ–∫ —Å–ª–æ–≤–∞ "–∑–∞–¥–∞—á–∞" –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
 */
const getTaskWordForm = (count: number): string => {
  if (count % 10 === 1 && count % 100 !== 11) {
    return '–∑–∞–¥–∞—á–∞';
  } else if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) {
    return '–∑–∞–¥–∞—á—ñ';
  } else {
    return '–∑–∞–¥–∞—á';
  }
};

/**
 * –ë–µ–∑–ø–µ—á–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É—î –¥–∞—Ç—É, –ø–æ–≤–µ—Ä—Ç–∞—é—á–∏ –∑–∞–ø–∞—Å–Ω–∏–π —Ç–µ–∫—Å—Ç —É –≤–∏–ø–∞–¥–∫—É Invalid Date
 */
const safeFormatDate = (dateStr: string, options: Intl.DateTimeFormatOptions): string => {
  try {
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) {
      return '–¥–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
    }
    return date.toLocaleDateString('uk-UA', options);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏:', error);
    return '–¥–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞';
  }
};

/**
 * –§–æ—Ä–º–∞—Ç—É—î –∑–≤—ñ—Ç –ø—Ä–æ –∑–∞–¥–∞—á—ñ –∑–∞ –¥–µ–Ω—å
 */
export const formatDailyReport = (tasks: any[], date: Date): string => {
  const formattedDate = date.toLocaleDateString('uk-UA', { 
    day: 'numeric', 
    month: 'long', 
    year: 'numeric' 
  });
  
  let report = `<b>üìÖ –ó–í–Ü–¢ –ó–ê ${formattedDate.toUpperCase()}</b>\n\n`;
  
  if (tasks.length === 0) {
    report += "üîç –ù–µ–º–∞—î –∑–∞–¥–∞—á –Ω–∞ —Ü–µ–π –¥–µ–Ω—å.";
    return report;
  }
  
  // –°–æ—Ä—Ç—É—î–º–æ –∑–∞–¥–∞—á—ñ –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∞ —î
  const sortedTasks = [...tasks].sort((a, b) => {
    if (a.createdAt && b.createdAt) {
      return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
    }
    return 0;
  });
  
  // –†–æ–∑–¥—ñ–ª—è—î–º–æ –∑–∞–¥–∞—á—ñ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω—ñ, –∞–∫—Ç–∏–≤–Ω—ñ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ
  const completedTasks = sortedTasks.filter(task => task.completed);
  const activeTasks = sortedTasks.filter(task => !task.completed);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–¥–∞—á—ñ
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const overdueTasks = activeTasks.filter(task => {
    try {
      const taskDate = new Date(task.dueDate);
      if (isNaN(taskDate.getTime())) return false;
      taskDate.setHours(0, 0, 0, 0);
      return taskDate < today;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞—Ç–∏ –∑–∞–¥–∞—á—ñ:', error);
      return false;
    }
  });
  
  // –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–¥–∞—á—ñ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ (–Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ)
  const todayTasks = activeTasks.filter(task => !overdueTasks.includes(task));
  
  const completedWord = getTaskWordForm(completedTasks.length);
  const totalWord = getTaskWordForm(tasks.length);
  
  report += `<b>‚úÖ –í–ò–ö–û–ù–ê–ù–û: ${completedTasks.length}/${tasks.length} ${completedWord}</b>\n`;
  if (completedTasks.length > 0) {
    completedTasks.forEach((task, index) => {
      report += `   ${index + 1}. ${task.title}\n`;
    });
  } else {
    report += "   –ù–µ–º–∞—î –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–¥–∞—á\n";
  }
  
  const todayWord = getTaskWordForm(todayTasks.length);
  report += `\n<b>‚è≥ –ó–ê–ü–õ–ê–ù–û–í–ê–ù–û –ù–ê –°–¨–û–ì–û–î–ù–Ü: ${todayTasks.length} ${todayWord}</b>\n`;
  if (todayTasks.length > 0) {
    todayTasks.forEach((task, index) => {
      report += `   ${index + 1}. ${task.title}\n`;
    });
  } else {
    report += "   –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n";
  }
  
  if (overdueTasks.length > 0) {
    const overdueWord = getTaskWordForm(overdueTasks.length);
    report += `\n<b>‚ö†Ô∏è –ü–†–û–°–¢–†–û–ß–ï–ù–û: ${overdueTasks.length} ${overdueWord}</b>\n`;
    overdueTasks.forEach((task, index) => {
      const formattedTaskDate = safeFormatDate(task.dueDate, { 
        day: 'numeric', 
        month: 'long'
      });
      report += `   ${index + 1}. ${task.title} (${formattedTaskDate})\n`;
    });
  }
  
  // –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
  const completionRate = tasks.length > 0 ? Math.round((completedTasks.length / tasks.length) * 100) : 0;
  report += `\n<b>üìä –ü–†–û–ì–†–ï–°: ${completionRate}%</b>`;
  
  return report;
};

/**
 * –§–æ—Ä–º–∞—Ç—É—î –∑–≤—ñ—Ç –ø—Ä–æ –∑–∞–¥–∞—á—ñ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
 */
export const formatWeeklyReport = (tasks: any[], startDate: Date, endDate: Date): string => {
  const startFormatted = startDate.toLocaleDateString('uk-UA', { 
    day: 'numeric', 
    month: 'long'
  });
  
  const endFormatted = endDate.toLocaleDateString('uk-UA', { 
    day: 'numeric', 
    month: 'long', 
    year: 'numeric' 
  });
  
  let report = `<b>üìä –¢–ò–ñ–ù–ï–í–ò–ô –ó–í–Ü–¢</b>\n`;
  report += `<b>üìÜ ${startFormatted.toUpperCase()} - ${endFormatted.toUpperCase()}</b>\n\n`;
  
  if (tasks.length === 0) {
    report += "üîç –ù–µ–º–∞—î –∑–∞–¥–∞—á –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥.";
    return report;
  }
  
  // –°–æ—Ä—Ç—É—î–º–æ –∑–∞–¥–∞—á—ñ –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∞ —î
  const sortedTasks = [...tasks].sort((a, b) => {
    if (a.createdAt && b.createdAt) {
      return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
    }
    return 0;
  });
  
  const completedTasks = sortedTasks.filter(task => task.completed);
  const activeTasks = sortedTasks.filter(task => !task.completed);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–¥–∞—á—ñ
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const overdueTasks = activeTasks.filter(task => {
    try {
      const taskDate = new Date(task.dueDate);
      if (isNaN(taskDate.getTime())) return false;
      taskDate.setHours(0, 0, 0, 0);
      return taskDate < today;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞—Ç–∏ –∑–∞–¥–∞—á—ñ:', error);
      return false;
    }
  });
  
  // –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–¥–∞—á—ñ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å (–Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ)
  const currentWeekTasks = activeTasks.filter(task => !overdueTasks.includes(task));
  
  const completionRate = tasks.length > 0 ? Math.round((completedTasks.length / tasks.length) * 100) : 0;
  
  const completedWord = getTaskWordForm(completedTasks.length);
  const activeWord = getTaskWordForm(currentWeekTasks.length);
  const overdueWord = overdueTasks.length > 0 ? getTaskWordForm(overdueTasks.length) : '';
  
  report += `<b>üìà –ó–ê–ì–ê–õ–¨–ù–ò–ô –ü–†–û–ì–†–ï–°: ${completionRate}%</b>\n`;
  report += `<b>‚úÖ –í–ò–ö–û–ù–ê–ù–û: ${completedTasks.length} ${completedWord}</b>\n`;
  report += `<b>‚è≥ –ê–ö–¢–ò–í–ù–ò–•: ${currentWeekTasks.length} ${activeWord}</b>\n`;
  if (overdueTasks.length > 0) {
    report += `<b>‚ö†Ô∏è –ü–†–û–°–¢–†–û–ß–ï–ù–û: ${overdueTasks.length} ${overdueWord}</b>\n`;
  }
  report += `\n`;
  
  // –ì—Ä—É–ø—É—î–º–æ –∑–∞–¥–∞—á—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
  const tasksByCategory: Record<string, any[]> = {};
  sortedTasks.forEach(task => {
    const category = task.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó';
    if (!tasksByCategory[category]) {
      tasksByCategory[category] = [];
    }
    tasksByCategory[category].push(task);
  });
  
  report += "<b>üìã –ó–ê–î–ê–ß–Ü –ó–ê –ö–ê–¢–ï–ì–û–†–Ü–Ø–ú–ò:</b>\n";
  
  Object.entries(tasksByCategory).forEach(([category, categoryTasks]) => {
    const categoryCompleted = categoryTasks.filter(task => task.completed).length;
    const categoryTotal = categoryTasks.length;
    const categoryWord = getTaskWordForm(categoryTotal);
    
    report += `\n<b>üî∑ ${category.toUpperCase()} (${categoryCompleted}/${categoryTotal} ${categoryWord}):</b>\n`;
    
    // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–≤–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–¥–∞—á—ñ
    const activeCategoryTasks = categoryTasks.filter(task => !task.completed && !overdueTasks.includes(task));
    if (activeCategoryTasks.length > 0) {
      activeCategoryTasks.forEach(task => {
        const formattedTaskDate = safeFormatDate(task.dueDate, { 
          day: 'numeric', 
          month: 'long'
        });
        report += `   ‚è≥ ${task.title} (${formattedTaskDate})\n`;
      });
    }
    
    // –ü–æ—Ç—ñ–º –≤–∏–≤–æ–¥–∏–º–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–¥–∞—á—ñ
    const overdueCategoryTasks = categoryTasks.filter(task => overdueTasks.includes(task));
    if (overdueCategoryTasks.length > 0) {
      overdueCategoryTasks.forEach(task => {
        const formattedTaskDate = safeFormatDate(task.dueDate, { 
          day: 'numeric', 
          month: 'long'
        });
        report += `   ‚ö†Ô∏è ${task.title} (${formattedTaskDate}) - –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ\n`;
      });
    }
    
    // –ü–æ—Ç—ñ–º –≤–∏–≤–æ–¥–∏–º–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ
    const completedCategoryTasks = categoryTasks.filter(task => task.completed);
    if (completedCategoryTasks.length > 0) {
      completedCategoryTasks.forEach(task => {
        report += `   ‚úÖ ${task.title}\n`;
      });
    }
  });
  
  return report;
};

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–µ—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç
 */
export const sendTestReport = async (): Promise<boolean> => {
  const settings = loadTelegramSettings();
  
  if (!settings.enabled || !settings.botToken || !settings.chatId) {
    return false;
  }
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–¥–∞—á—ñ –∑ localStorage
  try {
    const tasksJson = localStorage.getItem('tasks');
    const allTasks = tasksJson ? JSON.parse(tasksJson) : [];
    
    const today = new Date();
    const formattedDate = today.toLocaleDateString('uk-UA', { 
      day: 'numeric', 
      month: 'long', 
      year: 'numeric' 
    });
    
    let message = `<b>üß™ –¢–ï–°–¢–û–í–ò–ô –ó–í–Ü–¢</b>\n\n` +
      `–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Telegram –±–æ—Ç–∞.\n\n` +
      `<b>üìÖ –î–∞—Ç–∞:</b> ${formattedDate}\n` +
      `<b>‚è∞ –ß–∞—Å:</b> ${today.toLocaleTimeString('uk-UA')}\n\n`;
    
    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ –∑–∞–¥–∞—á—ñ
    const totalWord = getTaskWordForm(allTasks.length);
    message += `<b>üìã –í–°–Ü –ó–ê–î–ê–ß–Ü (${allTasks.length} ${totalWord}):</b>\n\n`;
    
    if (allTasks.length === 0) {
      message += "–£ –≤–∞—Å –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –∑–∞–¥–∞—á.\n";
    } else {
      const activeTasks = allTasks.filter((task: any) => !task.completed);
      const completedTasks = allTasks.filter((task: any) => task.completed);
      
      const activeWord = getTaskWordForm(activeTasks.length);
      message += `<b>‚è≥ –ê–ö–¢–ò–í–ù–Ü –ó–ê–î–ê–ß–Ü (${activeTasks.length} ${activeWord}):</b>\n`;
      if (activeTasks.length > 0) {
        activeTasks.forEach((task: any, index: number) => {
          const formattedTaskDate = safeFormatDate(task.dueDate, { 
            day: 'numeric', 
            month: 'long'
          });
          message += `   ${index + 1}. ${task.title} (${formattedTaskDate})\n`;
        });
      } else {
        message += "   –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á\n";
      }
      
      const completedWord = getTaskWordForm(completedTasks.length);
      message += `\n<b>‚úÖ –í–ò–ö–û–ù–ê–ù–Ü –ó–ê–î–ê–ß–Ü (${completedTasks.length} ${completedWord}):</b>\n`;
      if (completedTasks.length > 0) {
        completedTasks.slice(0, 5).forEach((task: any, index: number) => {
          message += `   ${index + 1}. ${task.title}\n`;
        });
        
        if (completedTasks.length > 5) {
          const remainingWord = getTaskWordForm(completedTasks.length - 5);
          message += `   ... —Ç–∞ —â–µ ${completedTasks.length - 5} ${remainingWord}\n`;
        }
      } else {
        message += "   –ù–µ–º–∞—î –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–¥–∞—á\n";
      }
    }
    
    message += `\n<b>‚ú® –Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑–Ω–∞—á–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ.</b>`;
    
    return await sendTelegramMessage(settings.botToken, settings.chatId, message);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É:", error);
    return false;
  }
}; 